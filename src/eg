//   const edgeUpdateSuccessful = useRef(true);
//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);
//   const [rfInstance, setRfInstance] = useState<ToObject | null>(null);
//   const { setViewport } = useReactFlow();    
//   const element = useRef(null)

    
//   const onConnect: OnConnect = useCallback(
//     (connection) => setEdges((eds) => addEdge(connection, eds)),
//     [setEdges]
//   );

//   const onSave = useCallback(() => {      

//     if (rfInstance) {
//       const flow = rfInstance?.toObject();
//       console.log(flow)
//       localStorage.setItem(flowKey, JSON.stringify(flow));
//     }
//   }, [rfInstance]);

//   const onRestore = useCallback(() => {
//     const restoreFlow = async () => {
//       const flow = JSON.parse(localStorage.getItem(flowKey)!);

//       if (flow) {
//         const { x = 0, y = 0, zoom = 1 } = flow.viewport;
//         setNodes(flow.nodes || []);
//         setEdges(flow.edges || []);
//         setViewport({ x, y, zoom });
//       }
//     };

//     restoreFlow();
//   }, [setEdges, setNodes, setViewport]);

//      const onAdd = useCallback(() => {
//     const newNode = {
//       id: getNodeId(),
//       data: { label: 'Added node' },
//       position: {
//         x: Math.random() * window.innerWidth - 100,
//         y: Math.random() * window.innerHeight,
//       },
//     };
//     setNodes((nds) => nds.concat(newNode));
//   }, [setNodes]);

//   const onEdgeUpdateStart = useCallback(() => {
//     edgeUpdateSuccessful.current = false;
//   }, []);

//   const onEdgeUpdate = useCallback((oldEdge: any, newConnection: any) => {
//     edgeUpdateSuccessful.current = true;
//     setEdges((els) => updateEdge(oldEdge, newConnection, els));
//   }, [setEdges]);

//   const onEdgeUpdateEnd = useCallback((_: any, edge: { id: string; }) => {
//     if (!edgeUpdateSuccessful.current) {
//       setEdges((eds) => eds.filter((e) => e.id !== edge.id));
//     }

//     edgeUpdateSuccessful.current = true;
//   }, [setEdges]);

//   const onNodeClick = (e: any) => {
//     console.log(e.target)
//     console.log(nodes.filter(node => node.id === '1'))    
//   }